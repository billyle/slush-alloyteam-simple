{"name":"Slush-alloyteam-simple","tagline":"Alloyteam Simple Web Apps generator base on slush & glup","body":"slush-alloyteam-simple\r\n==========================\r\n\r\nAlloyteam Simple Web Apps generator base on slush & glup \r\n\r\nAlloyteam web 前端项目工程化模板\r\n\r\n### 特性\r\n1. 基于 gulp 进行构建，方便快捷，易于定制和插件支持\r\n2. 最小化需配置项 (project.js)，基于约定优于配置理念\r\n3. 所有资源使用增量发布策略，文件名全部 md5 版本化，让产品轻松支持多版本并存\r\n2. [css] 使用 compass 编写模块化、可维护 css\r\n2. [css] 使用 compass 自动 sprite 生成精灵图，自动生成版本化图片 (无需修改时间戳)\r\n3. [js] 支持多种模块化策略，使用 webpack 进行 cmd/amd 模块化打包\r\n4. [js] 内置 handlebar 模板引擎支持，发布前编译\r\n5. [html] 自动替换 html 内部资源引用路径，替换为 cdn/md5 版本化路径\r\n6. [html] 轻松支持 js/css 资源内嵌到页面\r\n7. [工程化集成] 生成资源（ak离线包、web资源），对接内部发布系统 jb.oa.com\r\n7. [工程化集成] 通过 task 调用 jb.oa.com 提供 rest api 接口，轻松实现命令行部署测试环境、正式环境、离线包发布等\r\n\r\n### 依赖\r\n1. [ruby](https://www.ruby-lang.org/) & [compass](http://compass-style.org/)\r\n2. [nodejs](http://nodejs.org/)\r\n3. [gulp](https://github.com/gulpjs/gulp/) & [slush](https://github.com/slushjs/slush)\r\n\r\n### 安装\r\n* 安装 ruby，参考 https://www.ruby-lang.org/en/installation/\r\n* 建议安装 compass preview 版本\r\n```shell\r\ngem install compass --pre\r\n```\r\n* 安装 nodejs，参考 http://nodejs.org/\r\n* 安装 gulp slush slush-alloyteam-simple\r\n```shell\r\nnpm install -g gulp slush slush-alloyteam-simple\r\n```\r\n* 创建项目目录\r\n```shell\r\nmkdir alloyteam-webapp\r\ncd alloyteam-webapp\r\n```\r\n* 初始化项目\r\n```shell\r\nslush alloyteam-simple\r\n```\r\n* 按照提示填写项目初始化信息\r\n```shell\r\n项目名称，如：alloyteam-webapp\r\n项目html路径，如：http://find.qq.com/qqun/search/\r\n项目cdn路径，如：http://s.url.cn/qqun/qqfind/search/\r\n子项目(可留空)，如：qiqi_1111\r\n```\r\n* [可选] 确定 jb.oa.com 是否有对应部署映射，多个子项目的映射可以公用，如各种运营活动，activity/qiqi_1111\r\n```shell\r\n项目路径 与 jb 映射对应关系\r\nhttp://find.qq.com/qqun/search/  <=> /data/sites/find.qq.com/qqun/search/ \r\nhttp://s.url.cn/qqun/qqfind/search/  <=> /data/sites/cdn.qplus.com/qqun/search/\r\n```\r\n* 安装构建依赖\r\n```shell\r\nnpm install\r\n```\r\n* 启动开发任务\r\n```shell\r\ngulp\r\n```\r\n* 启动正常发布编译任务\r\n```shell\r\ngulp dist\r\n```\r\n\r\n### 目录约定\r\n* 根目录\r\n```shell\r\n./alloyteam-simple-app/\r\n├── README.md\r\n├── config.rb  -- sass 配置文件，不需修改\r\n├── dist  -- 开发编译目录，开发时将资源替换到这里\r\n├── gulpfile.js  -- gulp 构建文件，不需修改，版本升级，只需下载最新覆盖\r\n├── node_modules\r\n├── package.json\r\n├── project.js -- 全局配置\r\n├── src   -- 源代码目录\r\n└── userdef.js  -- jb.oa.com 发布系统集成配置文件\r\n```\r\n* 源代码目录\r\n```shell\r\n./src\r\n├── css  -- sass 样式目录，不需要编译生成 .css 文件的子模块，请使用 _ 开头\r\n│   ├── common   -- 公共样式\r\n│   │   ├── _level.scss  -- 自动 sprite 合并图片示范\r\n│   │   ├── _reset.scss  -- reset css 公共模块\r\n│   │   └── _ricons.scss  -- retina 高清 sprite 合并图片示范\r\n│   ├── index  -- index 页面样式子模块，可以将 index 所需样式进行子模块划分，便于管理\r\n│   │   └── _index.scss\r\n│   └── index.scss  -- index 样式，合并所有 index 页面样式子模块，公共模块，合图...\r\n├── favicon.ico\r\n├── img  -- 图片目录\r\n│   ├── common  -- 不需合图的图片，文件会自动在文件名加上md5，filename-md5.png\r\n│   │   ├── banner.png  -- 自动生成 banner-be70f3b1.png\r\n│   ├── sprite  -- 需要合图的图片，安装生成 sprite 图片名进行目录划分，可以自己新建子目录\r\n│   │   ├── icons  -- 普清图，最终合并生成 icons-sbb41937c32.png\r\n│   │   ├── icons@2x -- 2x高清图，生成 icons@2x-sb721890e87.png\r\n│   │   └── level -- 普清图，生成 level-s99b1a493c7.png\r\n│   └── static  -- 不需合图的图片，不需自动md5重命名的图片\r\n│       ├── static-img-url.png\r\n├── index.html  -- 首页\r\n├── js  -- js 目录，使用 cmd require 规范进行模块之间应用\r\n│   ├── common -- 公共模块\r\n│   │   ├── config.js\r\n│   │   └── global.js\r\n│   ├── index  -- 首页 js 模块\r\n│   │   └── index.js\r\n│   └── libs  -- 第三方 js 库，会被复制到 dist 目录，js/css 文件名 md5 化\r\n│       └── jquery\r\n├── libs  -- 第三方库，libs 所有文件会被复制到 dist 目录，js/css 文件名 md5 化\r\n│   └── bootstrap\r\n│       ├── bootstrap.css\r\n│       └── bootstrap.js\r\n└── tpl  -- handlebar 模板文件\r\n    ├── common  -- 公共模板页面片\r\n    │   ├── footer.hbs\r\n    │   └── header.hbs\r\n    └── index  -- 首页模板\r\n        └── list.hbs\r\n```\r\n\r\n### 如何新建一个页面，如下：mypage 为需要创建的页面名称\r\n```\r\nslush alloyteam-simple:page mypage\r\n```\r\n将会生成如下目录和文件\r\n```\r\n./src\r\n├── mypage.html \r\n├── css\r\n│   ├── mypage\r\n│   │   └── _index.scss\r\n│   └── mypage.scss\r\n├── js\r\n│   ├── mypage\r\n│   │   └── index.js\r\n├── tpl\r\n│   ├── mypage\r\n│   │   └── index.hbs\r\n```\r\n修改 project.js 中的 webpack entry 项目，添加对应的 js 编译项\r\n```\r\nentry: {\r\n    index: './src/js/index/index.js',\r\n    mypage: './src/js/mypage/index.js'\r\n},\r\n```\r\n\r\n### 如何新建一个 sprite 自动合图，如下：mysprite 为需要创建的 sprite 名称\r\n```\r\n# 生成精灵图，方式一：自动生成合图样式，参考下面【关于 css】说明\r\nslush alloyteam-simple:autosprite mysprite\r\n# 生成精灵图，方式二：使用 include 引用合图样式\r\nslush alloyteam-simple:sprite mysprite\r\n# 生成高清精灵图\r\nslush alloyteam-simple:retina mysprite\r\n```\r\n将会生成如下目录和文件\r\n```\r\n./src\r\n├── css\r\n│   ├── common\r\n│   │   └── _mysprite.scss\r\n├── img\r\n│   ├── mysprite\r\n```\r\n\r\n\r\n#### 如何开始编码\r\n启动开发命令\r\n```shell\r\ngulp dev\r\n```\r\n\r\n#### 关于 css\r\n* 使用 sass 进行 css 编写，有利于模块化，可复用\r\n* 利用 compass 提供了便捷的自动合图，只支持 png\r\n\r\n##### 如何进行自动合图，方式一：自动生成合图样式\r\n* 在 src/img/sprite 下新建目录，名称为 sprite 名称，如QQ等级，level\r\n* 将需要合图的图片放到 img/sprite/level 下，如 search.png 和 webqq.png\r\n* 在 src/css/common 下新建文件，_level.scss (ps: 将文件内容中 level 替换为自己的 sprite 名称)\r\n```\r\n$level-layout:smart;\r\n@import\"sprite/level/*.png\";\r\n@include all-level-sprites;\r\n```\r\n上面的代码将自动生成如下代码\r\n```\r\n.level-search, .level-sprite, .level-webqq {\r\n    background-image: url(../img/sprite/level-s99b1a493c7.png);\r\n    background-repeat: no-repeat\r\n}\r\n.level-search {\r\n    background-position: 0 0\r\n}\r\n.level-webqq {\r\n    background-position: 0 -24px\r\n}\r\n```\r\n* 将对应的 css 样式规则加在 html 页面或 hbs 模板中\r\n```\r\n<span class='level-search'></span>\r\n```\r\n\r\n##### 如何进行自动合图，方式二：使用 include 引用合图样式\r\n* 在 src/img/sprite 下新建目录，名称为 sprite 名称，如QQ等级，level\r\n* 将需要合图的图片放到 img/sprite/level 下，如 search.png 和 webqq.png\r\n* 在 src/css/common 下新建文件，_level.scss (ps: 将文件内容中 level 替换为自己的 sprite 名称)\r\n```\r\n$level-layout:smart;\r\n@import\"sprite/level/*.png\";\r\n```\r\n* 在需要引用小图标的地方，使用 @include {合图名称}-sprite(\"图标名称\") 的方式引用\r\n```\r\n@import\"common/level\";\r\n.hello {\r\n    &:before {\r\n        @include level-sprite(\"search\");\r\n    }\r\n}\r\n```\r\n上面的代码将自动生成如下代码\r\n```\r\n.hello:before {\r\n    background-image: url(../img/sprite/level-s99b1a493c7.png);\r\n    background-repeat: no-repeat\r\n}\r\n.hello:before {\r\n    background-position: 0 0\r\n}\r\n```\r\n\r\n##### 如何让合图支持 retina 高清屏\r\n* 大致过程参考上文 【如何进行自动合图，方式二】\r\n* 在 src/img/sprite 下新建目录，名称为 sprite 名称，如QQ等级，level\r\n* 分别在 src/img/sprite/level，src/img/sprite/level@2x 下面放普通图标和2x高清图\r\n* 在 src/css/common 下新建文件，_level.scss (ps: 将文件内容中 level 替换为自己的 sprite 名称)\r\n```\r\n$level:sprite-map(\"sprite/level/*.png\", $layout:smart);\r\n$level-2x:sprite-map(\"sprite/level@2x/*.png\", $layout:smart);\r\n@mixin level-sprite-retina($sprite) {\r\n    background-image: sprite-url($level);\r\n    background-position: sprite-position($level, $sprite);\r\n    background-repeat: no-repeat;\r\n    overflow: hidden;\r\n    display: block;\r\n    height: image-height(sprite-file($level, $sprite));\r\n    width: image-width(sprite-file($level, $sprite));\r\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n        background-image: sprite-url($level-2x);\r\n        background-size: (image-width(sprite-path($level-2x)) / 2) (image-height(sprite-path($level-2x)) / 2);\r\n        background-position: round(nth(sprite-position($level-2x, $sprite), 1) / 2) round(nth(sprite-position($level-2x, $sprite), 2) / 2);\r\n        height: image-height(sprite-file($level-2x, $sprite)) / 2;\r\n        width: image-width(sprite-file($level-2x, $sprite)) / 2;\r\n    }\r\n}\r\n```\r\n* 在需要引用小图标的地方，使用 @include {合图名称}-retina-sprite(\"图标名称\") 的方式引用\r\n```\r\n@import\"common/level\";\r\n.hello {\r\n    &:before {\r\n        @include level-retina-sprite(\"search\");\r\n    }\r\n}\r\n```\r\n\r\n#### 关于 js\r\n* 利用 webpack 进行 cmd 模块打包\r\n* 在 js 中直接使用 require 即可，全部使用相对路径\r\n```\r\n// ./src/js/index/index.js\r\nrequire('../common/global.js');\r\nrequire('../common/config.js');\r\nconsole.log('index is loaded');\r\n```\r\n* 在 js 中引用 handlebar 模板文件\r\n```\r\n// ./src/js/index/index.js\r\nvar listTpl = require('../../tpl/index/list.hbs');\r\nvar data = {\r\n    body: 'this is body',\r\n    title: 'hi title'\r\n};\r\nvar dom = listTpl(data);\r\n```\r\n* 在 js 中引用 src/img/common 下图片\r\n```\r\nvar banner = require('../../img/common/banner.png');\r\n// will change to: \"http://s.url.cn/qqun/img/common/banner-be70f3b1.png\"\r\n```\r\n\r\n* 在 js 中引用 src/img/static 下图片\r\n```\r\nvar staticImg = require('../../img/static/static-img-url.png');\r\n// will change to: \"http://s.url.cn/qqun/img/static/static-img-url.png\"\r\n```\r\n\r\n* 在 js 中引用第三方库，如 jQuery\r\n修改 project.js 配置，在 webpack 配置中添加 jQuery: \"jQuery\" (window.jQuery 可访问，其他库类似)\r\n```\r\nexternals: {\r\n    jQuery: \"jQuery\"\r\n}\r\n```\r\n在 js 中直接添加引用\r\n```\r\nvar jQuery = require('jQuery');\r\n```\r\n在 html 中添加 jquery 引用\r\n```\r\n<script src=\"js/libs/jquery/jquery.js\"></script>\r\n```\r\n\r\n* 独立打包公共库，共享代码，避免不同页面 js 重复打包\r\n修改 project.js 配置，添加公共库入口 common\r\n```\r\nentry: {\r\n    commons: './src/js/common/index.js',\r\n    index: './src/js/index/index.js',\r\n    mypage: './src/js/mypage/index.js'\r\n},\r\n```\r\n在 common/index.js 中暴露一个全局变量 window.commons \r\n```\r\n// src/js/common/index.js\r\nwindow.commons = {\r\n    sub1: require('./sub1.js'),\r\n    sub2: require('./sub2.js')\r\n};\r\n```\r\n按照第三方类库的方式，引入 commons\r\n```\r\nexternals: {\r\n    commons: \"commons\"\r\n}\r\n```\r\n在 js 中直接添加引用\r\n```\r\nvar commons = require('commons');\r\n```\r\n在 html 中添加 commons 引用\r\n```\r\n<script src=\"js/commons.js\"></script>\r\n<script src=\"js/mypage.js\"></script>\r\n```\r\n\r\n* 异步远程加载 js\r\n待续\r\n\r\n### 关于 handlebar 模板文件\r\n* 语法参考: http://handlebarsjs.com/  \r\n* https://github.com/altano/handlebars-loader\r\n\r\n### 关于 html 文件\r\n\r\n\r\n### 关于 liveproxy 开发代理\r\n待续\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}